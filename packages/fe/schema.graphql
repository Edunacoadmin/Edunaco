type BlogCommentItem implements CreatedAt & UpdatedAt {
  author: String
  blogItemId: String
  createdAt: String
  text: String
  updatedAt: String
}

type BlogCommentItemResult implements Count & Error {
  count: Int
  data: BlogCommentItem
  error: String
}

input BlogCommentItemUpdate {
  author: String
  text: String
}

type BlogItem implements CreatedAt & UpdatedAt {
  comments: [BlogCommentItemResult]
  createdAt: String
  imageUri: String
  itemId: String
  text: String
  title: String
  updatedAt: String
}

type BlogItemResult implements Count & Error {
  count: Int
  data: BlogItem
  error: String
}

input BlogItemUpdate {
  imageUri: String
  text: String
  title: String
}

input CommentsFilter {
  author: String
  createdAt: String
  text: String
}

type Coordinates {
  coordinates: [Float]
}

interface Count {
  count: Int
}

interface CreatedAt {
  createdAt: String
}

interface Error {
  error: String
}

type GeoItem {
  address: String
  importance: Float
  lat: Float
  lon: Float
}

type GeoResult implements Count & Error {
  count: Int
  data: [GeoItem]
  error: String
}

type Item {
  city: String
  combinedStudy: Boolean
  contact: String
  distance: Float
  educationStyle: String
  email: String
  fee: Boolean
  id: String
  inRegistry: Boolean
  individualTuition: Boolean
  location: Coordinates
  phone: String
  postCode: String
  remoteStudy: Boolean
  street: String
  subType: String
  title: String
  type: String
  www: String
}

type ItemResult implements Count & Error {
  count: Int
  data: Item
  error: String
}

input ItemsFilter {
  educationStyle: String
  entity: String
  evaluation: String
  inRegistry: Boolean
  type: String
}

type ItemsResult implements Count & Error {
  count: Int
  data: [Item]
  error: String
}

input Location {
  lat: Float
  lon: Float
}

type Mutation {
  addBlogCommentItem(item: NewBlogCommentItem): BlogCommentItemResult
  addBlogItem(item: NewBlogItem): BlogItemResult
  updateBlogCommentItem(id: ID!, item: BlogCommentItemUpdate): BlogCommentItemResult
  updateBlogItem(id: ID!, item: BlogItemUpdate): BlogItemResult
  updateGeoItem(id: String, location: Location): ItemResult
}

input NewBlogCommentItem {
  author: String!
  blogItemId: String!
  text: String!
}

input NewBlogItem {
  imageUri: String
  itemId: String!
  text: String!
  title: String!
}

input Page {
  limit: Int
  skip: Int
}

type Query {
  filterItems(filter: ItemsFilter, page: Page, sort: Sort): ItemsResult
  getBlogItem(commentsFilter: CommentsFilter, commentsPage: Page, commentsSort: Sort, id: ID!): BlogItemResult

  """Bojetice 101, Dobrovice, 29441"""
  getGeo(address: String): GeoResult
  getItem(id: String!): ItemResult
  searchItemsByGeo(location: Location, page: Page): ItemsResult
  searchItemsByText(page: Page, search: Search, sort: Sort): ItemsResult
  status: String
}

input Search {
  value: String
}

input Sort {
  dir: Int
  field: String
}

interface UpdatedAt {
  updatedAt: String
}